name: Java CI with Gradle
on:
  push:
    branches: [ beDev ]
  pull_request:
    branches: [ beDev ]
jobs:
  testA:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          occupy-secret: ${{ secrets.OCCUPY_SECRET }}
          occupy-pem: ${{ secrets.OCCUPY_PEM }}
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      - name: Test with Gradle
        run: |
          cd Server
          chmod +x gradlew
          ./gradlew testA
          
  testB:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          occupy-secret: ${{ secrets.OCCUPY_SECRET }}
          occupy-pem: ${{ secrets.OCCUPY_PEM }}
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      - name: Test with Gradle
        run: |
          cd Server
          chmod +x gradlew
          ./gradlew testB
  testC:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          occupy-secret: ${{ secrets.OCCUPY_SECRET }}
          occupy-pem: ${{ secrets.OCCUPY_PEM }}
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      - name: Test with Gradle
        run: |
          cd Server
          chmod +x gradlew
          ./gradlew testC
          
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          occupy-secret: ${{ secrets.OCCUPY_SECRET }}
          occupy-pem: ${{ secrets.OCCUPY_PEM }}
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      - name: Build with Gradle
        run: |
          cd Server
          chmod +x gradlew
          ./gradlew build -PdoNotRunTests
      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
          docker build -t prometheus -f Server/Dockerfile Server
          docker tag prometheus ${{ secrets.DOCKER_HUB_USERNAME }}/prometheus:${GITHUB_SHA::7}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/prometheus:${GITHUB_SHA::7}
  cd:
    needs: 
    - testA
    - testB
    - testC
    - build
    runs-on: ubuntu-latest
    steps:
      - name: Docker cd latest
        run: |
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/prometheus:${GITHUB_SHA::7}
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/prometheus:${GITHUB_SHA::7} ${{ secrets.DOCKER_HUB_USERNAME }}/prometheus:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/prometheus:latest
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Execute command on EC2 instances
        run: |
          INSTANCE_DATA=$(aws ec2 describe-instances --filters "Name=tag:aws:autoscaling:groupName,Values=prometheus-asg" --query "Reservations[*].Instances[*].[InstanceId,State.Name]" --output text)
          while read -r ID STATE; do
            if [ "$STATE" == "running" ]; then
              aws ssm send-command \
              --instance-ids $ID \
              --document-name "AWS-RunShellScript" \
              --parameters commands="[
                'if sudo docker ps -a --format \\'{{.Names}}\\' | grep -q \'^prometheus$\\'; then',
                'sudo docker stop prometheus',
                'sudo docker rm prometheus',
                'fi',
                'sudo docker pull sksjsksh32/prometheus:latest',
                'sudo docker tag sksjsksh32/prometheus:latest prometheus',
                'sudo docker image rm sksjsksh32/prometheus:latest',
                'sudo docker image prune -f',
                'sudo docker run -d -p 80:8080 -p 9010:9010 --name prometheus -v /home/ubuntu/logs:/logs -e SPRING_PROFILES_ACTIVE=prod -e JAVA_OPTS=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9010 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\" prometheus'
              ]"
            fi
          done <<< "$INSTANCE_DATA"
