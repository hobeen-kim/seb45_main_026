name: Java CI with Gradle

on:
  push:
    branches: [ beDev ]
  pull_request:
    branches: [ beDev ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'zulu'
      - name: Copy Secret
        env:
          OCCUPY_SECRET: ${{ secrets.OCCUPY_SECRET }}
          OCCUPY_SECRET_DIR: Server/src/main/resources
          OCCUPY_SECRET_DIR_FILE_NAME: application-secret.yml
        run: echo $OCCUPY_SECRET | base64 --decode > $OCCUPY_SECRET_DIR/$OCCUPY_SECRET_DIR_FILE_NAME
      - name: Copy pem
        env:
          OCCUPY_PEM: ${{ secrets.OCCUPY_PEM }}
        run:  |
          echo "$OCCUPY_PEM" > Server/src/main/resources/prometheus.pem
          chmod 400 Server/src/main/resources/prometheus.pem
      - name: Build with Gradle
        run: |
          cd Server
          chmod +x gradlew
          ./gradlew build
      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
          docker build -t prometheus -f Server/Dockerfile Server
          docker tag prometheus ${{ secrets.DOCKER_HUB_USERNAME }}/prometheus:${GITHUB_SHA::7}
          docker tag prometheus ${{ secrets.DOCKER_HUB_USERNAME }}/prometheus:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/prometheus:${GITHUB_SHA::7}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/prometheus:latest
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Execute command on EC2 instances
        run: |
          INSTANCE_DATA=$(aws ec2 describe-instances --filters "Name=tag:aws:autoscaling:groupName,Values=prometheus-asg" --query "Reservations[*].Instances[*].[InstanceId,State.Name]" --output text)
          while read -r ID STATE; do
            if [ "$STATE" == "running" ]; then
              aws ssm send-command \
              --instance-ids $ID \
              --document-name "AWS-RunShellScript" \
              --parameters commands="[
                'if sudo docker ps -a --format \\'{{.Names}}\\' | grep -q \'^prometheus$\\'; then',
                'sudo docker stop prometheus',
                'sudo docker rm prometheus',
                'fi',
                'sudo docker pull sksjsksh32/prometheus:latest',
                'sudo docker tag sksjsksh32/prometheus:latest prometheus',
                'sudo docker image rm sksjsksh32/prometheus:latest',
                'sudo docker image prune -f',
                'sudo docker run -d -p 80:8080 --name prometheus -e SPRING_PROFILES_ACTIVE=prod prometheus'
              ]"
            fi
          done <<< "$INSTANCE_DATA"
