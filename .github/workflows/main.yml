name: Java CI with Gradle


on:
  push:
    branches: [ beDev ]
  pull_request:
    branches: [ beDev ]

jobs:
  testA:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          occupy-secret: ${{ secrets.OCCUPY_SECRET }}
          occupy-pem: ${{ secrets.OCCUPY_PEM }}
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      - name: Test with Gradle
        run: |
          cd Server
          chmod +x gradlew
          ./gradlew testA
      - name: Record failure for testA
        if: failure()
        run: echo "TestA failed" > testA.fail
      - run: echo "done" > testA.done
          
  testB:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          occupy-secret: ${{ secrets.OCCUPY_SECRET }}
          occupy-pem: ${{ secrets.OCCUPY_PEM }}
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      - name: Test with Gradle
        run: |
          cd Server
          chmod +x gradlew
          ./gradlew testB
      - name: Record failure for testB
        if: failure()
        run: echo "TestB failed" > testB.fail
      - run: echo "done" > testB.done

  testC:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          occupy-secret: ${{ secrets.OCCUPY_SECRET }}
          occupy-pem: ${{ secrets.OCCUPY_PEM }}
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      - name: Test with Gradle
        run: |
          cd Server
          chmod +x gradlew
          ./gradlew testC
      - name: Record failure for testC
        if: failure()
        run: echo "TestC failed" > testC.fail
      - run: echo "done" > testC.done
          

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          occupy-secret: ${{ secrets.OCCUPY_SECRET }}
          occupy-pem: ${{ secrets.OCCUPY_PEM }}
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      - name: Build with Gradle
        run: |
          cd Server
          chmod +x gradlew
          ./gradlew build -PdoNotRunTests
      - name: Wait for tests to complete
        run: |
          while true; do
            # *.fail 파일이 하나라도 있으면 즉시 종료
            if [ -f "testA.fail" ] || [ -f "testB.fail" ] || [ -f "testC.fail" ]; then
              rm testA.done testB.done testC.done testA.fail testB.fail testC.fail 2>/dev/null
              exit 1
            fi
            
            # *.done 파일들이 모두 있다면 루프 종료
            if [ -f "testA.done" ] && [ -f "testB.done" ] && [ -f "testC.done" ]; then
              break
            fi
            sleep 10
          done
          rm testA.done testB.done testC.done

      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
          docker build -t prometheus -f Server/Dockerfile Server
          docker tag prometheus ${{ secrets.DOCKER_HUB_USERNAME }}/prometheus:${GITHUB_SHA::7}
          docker tag prometheus ${{ secrets.DOCKER_HUB_USERNAME }}/prometheus:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/prometheus:${GITHUB_SHA::7}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/prometheus:latest
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      # - name: Execute command on EC2 instances
      #   run: |
      #     INSTANCE_DATA=$(aws ec2 describe-instances --filters "Name=tag:aws:autoscaling:groupName,Values=prometheus-asg" --query "Reservations[*].Instances[*].[InstanceId,State.Name]" --output text)
      #     while read -r ID STATE; do
      #       if [ "$STATE" == "running" ]; then
      #         aws ssm send-command \
      #         --instance-ids $ID \
      #         --document-name "AWS-RunShellScript" \
      #         --parameters commands="[
      #           'if sudo docker ps -a --format \\'{{.Names}}\\' | grep -q \'^prometheus$\\'; then',
      #           'sudo docker stop prometheus',
      #           'sudo docker rm prometheus',
      #           'fi',
      #           'sudo docker pull sksjsksh32/prometheus:latest',
      #           'sudo docker tag sksjsksh32/prometheus:latest prometheus',
      #           'sudo docker image rm sksjsksh32/prometheus:latest',
      #           'sudo docker image prune -f',
      #           'sudo docker run -d -p 80:8080 --name prometheus -v /home/ubuntu/logs:/logs -e SPRING_PROFILES_ACTIVE=prod prometheus'
      #         ]"
      #       fi
      #     done <<< "$INSTANCE_DATA"
